package gui;

import cards.Card;
import cards.Deck;
import cards.Isotope;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import main.Game;

public class AddDeckForm extends javax.swing.JFrame {

    private final Game game;
    private ArrayList<Isotope> isotopes;
    private ArrayList<Card> currentDeck;
    private ArrayList<Deck> decks;

    public AddDeckForm(Game game, ArrayList<Isotope> isotopes, ArrayList<Deck> decks) {
        initComponents();
        this.game = game;
        this.isotopes = isotopes;
        this.decks = decks;
        setDeck();
        createTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane1 = new javax.swing.JScrollPane();
        cardsTable = new javax.swing.JTable();
        scrollPane2 = new javax.swing.JScrollPane();
        isotopesTable = new javax.swing.JTable();
        markButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        nameTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cardsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Карта"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane1.setViewportView(cardsTable);
        if (cardsTable.getColumnModel().getColumnCount() > 0) {
            cardsTable.getColumnModel().getColumn(0).setResizable(false);
        }

        isotopesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Изотоп"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane2.setViewportView(isotopesTable);
        if (isotopesTable.getColumnModel().getColumnCount() > 0) {
            isotopesTable.getColumnModel().getColumn(0).setResizable(false);
        }

        markButton.setBackground(new java.awt.Color(242, 242, 242));
        markButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        markButton.setText("Пометить");
        markButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markButtonActionPerformed(evt);
            }
        });

        saveButton.setBackground(new java.awt.Color(239, 239, 239));
        saveButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        saveButton.setText("Сохранить колоду");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        nameTextField.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        nameTextField.setText("Название");

        nameLabel.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        nameLabel.setText("Введите название:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(markButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveButton)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(nameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 9, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(markButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void markButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markButtonActionPerformed
        markCard();
    }//GEN-LAST:event_markButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        Deck deck = new Deck();
        deck.setCards(currentDeck);
        deck.setName(nameTextField.getText());
        deck.setCreationDate(new Date());
        decks.add(deck);
        game.saveDecks();
        this.setVisible(false);
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddDeckForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddDeckForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddDeckForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddDeckForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable cardsTable;
    private javax.swing.JTable isotopesTable;
    private javax.swing.JButton markButton;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scrollPane1;
    private javax.swing.JScrollPane scrollPane2;
    // End of variables declaration//GEN-END:variables

    private void createTables() {
        DefaultTableModel model = (DefaultTableModel) isotopesTable.getModel();
        for (Isotope isotope : isotopes) {
            model.addRow(new Object[]{isotope.getName()});
        }
        model = (DefaultTableModel) cardsTable.getModel();
        for (int i = 0; i < 9; i++) {
            model.addRow(new Object[]{currentDeck.get(i * 4).getName()});
        }
    }

    private void markCard() {
        int cardNumber = cardsTable.getSelectedRow();
        int isotopeNumber = isotopesTable.getSelectedRow();
        if (cardNumber != -1 & isotopeNumber != -1) {
            for (int i = cardNumber * 4; i < cardNumber * 4 + 4; i++) {
                currentDeck.get(i).setIsotope(isotopes.get(isotopeNumber));
            }
        } else {
            System.out.println("Выберите карту и изотоп!");
        }
    }

    public void setDeck() {
        ArrayList<Card> cards = new ArrayList<>();
        cards.add(new Card("Шесть", 6, isotopes.get(0)));
        cards.add(new Card("Семь", 7, isotopes.get(1)));
        cards.add(new Card("Восемь", 8, isotopes.get(2)));
        cards.add(new Card("Девять", 9, isotopes.get(3)));
        cards.add(new Card("Десять", 10, isotopes.get(4)));
        cards.add(new Card("Валет", 2, isotopes.get(5)));
        cards.add(new Card("Дама", 3, isotopes.get(6)));
        cards.add(new Card("Король", 4, isotopes.get(7)));
        cards.add(new Card("Туз", 11, isotopes.get(8)));
        for (Card card : cards) {
            for (int i = 0; i < 4; i++) {
                currentDeck.add(card);
            }
        }
    }

}
